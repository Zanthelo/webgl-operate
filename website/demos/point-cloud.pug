extends demo.pug


block canvas

  canvas(id = 'demo-canvas', data-backend = 'auto').img-fluid.w-100

block breakdown
  p
  | This demo is intended as a template for basic point cloud or particle rendering. By default, #[strong 4 Million Points] are created randomly.
  | For rendering it can use three different types of geometry: billboards with quads or triangle-fans (using a regular polygon with adjustable number of sides/edges) and points.
  | Note that regular polygon rendering can be found within the code, but is commented for now.
  | Furthermore, alpha-to-coverage and separate alpha blending are used, and Phong shading per particle can be enabled.
  | If multiple CSV files are loaded, they will be "animated" automatically (that is, the draw range switches to the next data set per frame).

  div-input-group
    div.custom-file.mt-4
      input(id = 'input-file' name = 'input-file' type = 'file' accept = 'text/csv' multiple).custom-file-input
      label(id = 'label-file' for = 'input-file').custom-file-label Choose CSV with x, y, and z Coordinates.

  div.progress.mt-1
    div(role = 'progressbar' aria-valuenow = '0' aria-valuemin = '0' aria-valuemax = '100').progress-bar#progress-file

  p Three example CSV data sets are available for download: #[a(href = '/demos/data/street-scan.csv') street-scan.csv], #[a(href = '/demos/data/khronos.csv') khronos.csv], and #[a(href = '/demos/data/cube.csv') cube.csv].

  include ../partials/code.pug
  +code('demo-code', '' +
    'renderer.pointSize = 0.02;      // adjust point size, default is PointCloudRenderer.DEFAULT_POINT_SIZE\n\n' +
    'renderer.phongShading = true;   // enable/disable phong shading of points (only in billboard mode)\n\n' +
    'renderer.alpha2Coverage = true; // enable/disable alpha to coverage (requires GET param ?antialias=true)\n' +
    'renderer.alphaBlending = true;  // enable/disable separate alpha blending\n\n' +
    'renderer.billboards = false;    // enable GL_POINT-based rendering or, if true, vertex-shader billboards\n\n' +
    '// adjust model matrix using glMatrix (exposed in webgl-operate via gloperate object)\n' +
    'renderer.model = gloperate.mat4.fromScale(gloperate.mat4.create(), [2.0,2.0,2.0])', 'The following code snippets show how the different options can be enabled:')

  +code('alpha-to-coverage', '' +
    'gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);\n' +
    'gl.sampleCoverage(1.0, false);\n' +
    'gl.enable(gl.BLEND);\n' +
    'gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n', 'How alpha-to-coverage and blending are used in the source code:')

  p Point cloud from khronos.csv with Phong shading enabled:
    img(src = "/img/point-cloud-khronos.jpg").img-fluid

  p Point cloud from cube.csv using the different display modes:
    img(src = "/img/point-cloud-modes.png").img-fluid


block onload
  script window.onload = function () { clipboard(); demo(new PointCloudDemo(), 'demo-canvas'); }
